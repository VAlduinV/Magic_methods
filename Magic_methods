import re
import datetime


class Field:
    def __init__(self, value=None):
        self.value = value

    def __str__(self):
        return str(self.value)

    def __repr__(self):
        return f'{type(self).__name__}({repr(self.value)})'

    def __eq__(self, other):
        return self.value == other.value

    def __hash__(self):
        return hash(self.value)

    def validate(self):
        pass


class Phone(Field):
    def validate(self):
        if self.value is not None and not re.match(r'^\+?[1-9]\d{1,14}$', self.value):
            raise ValueError('Invalid phone number')
        super().validate()


class Birthday(Field):
    def validate(self):
        if self.value is not None:
            try:
                datetime.datetime.strptime(self.value, '%Y-%m-%d')
            except ValueError:
                raise ValueError('Invalid date format')
        super().validate()

    def days_to_birthday(self):
        if self.value is None:
            return None
        today = datetime.date.today()
        birthday = datetime.datetime.strptime(self.value, '%Y-%m-%d').date().replace(year=today.year)
        if birthday < today:
            birthday = birthday.replace(year=today.year + 1)
        return (birthday - today).days


class Record:
    def __init__(self, name, phone=None, email=None, birthday=None):
        self.name = name
        self.phone = Phone(phone)
        self.email = email
        self.birthday = Birthday(birthday)

    def __str__(self):
        return f'{self.name} {self.phone} {self.email} {self.birthday}'

    def __repr__(self):
        return f'{type(self).__name__}({self.name!r}, {self.phone!r}, {self.email!r}, {self.birthday!r})'

    @property
    def phone(self):
        return self._phone

    @phone.setter
    def phone(self, value):
        value.validate()
        self._phone = value

    @property
    def birthday(self):
        return self._birthday

    @birthday.setter
    def birthday(self, value):
        value.validate()
        self._birthday = value


class AddressBook:
    def __init__(self, *args):
        self.data = []
        for record in args:
            self.add_record(record)

    def __str__(self):
        return '\n'.join(str(record) for record in self)

    def __repr__(self):
        return f'{type(self).__name__}({", ".join(repr(record) for record in self)})'

    def __iter__(self):
        return iter(self.data)

    def add_record(self, record):
        if not isinstance(record, Record):
            raise ValueError("Can't add a non-record object to the address book")
        self.data.append(record)

    def delete(self, name):
        for record in self.data:
            if record.name == name:
                self.data.remove(record)

    def search(self, name):
        return [record for record in self.data if record.name == name]

    def iterator(self, n):
        for i in range(0, len(self.data), n):
            yield self.data[i:i + n]


# Testing

# Creating Records
r1 = Record("John Doe", "+1234567890", "john.doe@example.com", "1990-01-01")
print(r1)
